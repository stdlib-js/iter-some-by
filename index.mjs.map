{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Tests whether at least `n` iterated values pass a test implemented by a predicate function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} n - number of successful values\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a function\n* @returns {boolean} boolean indicating whether at least `n` iterated values pass a test implemented by a predicate function\n*\n* @example\n* import array2iterator from '@stdlib/array-to-iterator';\n*\n* function predicate( v ) {\n*     return ( v > 0 );\n* }\n*\n* var it = array2iterator( [ 1, 1, 0, 0, 1 ] );\n*\n* var bool = iterSomeBy( it, 3, predicate );\n* // returns true\n*/\nfunction iterSomeBy( iterator, n, predicate, thisArg ) {\n\tvar count;\n\tvar v;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0Pp3v', iterator ) );\n\t}\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( '0Pp45', n ) );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( '0Pp3N', predicate ) );\n\t}\n\tcount = 0;\n\ti = -1;\n\twhile ( true ) {\n\t\ti += 1;\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( predicate.call( thisArg, v.value, i ) ) {\n\t\t\tcount += 1;\n\t\t\tif ( count === n ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterSomeBy;\n"],"names":["iterSomeBy","iterator","n","predicate","thisArg","count","v","i","isIteratorLike","TypeError","format","isPositiveInteger","isFunction","next","done","call","value"],"mappings":";;oZAsDA,SAASA,EAAYC,EAAUC,EAAGC,EAAWC,GAC5C,IAAIC,EACAC,EACAC,EACJ,IAAMC,EAAgBP,GACrB,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,IAAMU,EAAmBT,GACxB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,IAAMU,EAAYT,GACjB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAIvC,IAFAE,EAAQ,EACRE,GAAK,IACU,CAGd,GAFAA,GAAK,GACLD,EAAIL,EAASY,QACNC,KACN,OAAO,EAER,GAAKX,EAAUY,KAAMX,EAASE,EAAEU,MAAOT,KACtCF,GAAS,KACMH,EACd,OAAO,CAGT,CACF"}